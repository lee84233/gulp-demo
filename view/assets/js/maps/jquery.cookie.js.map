{"version":3,"sources":["jquery.cookie.js"],"names":["factory","define","amd","exports","module","require","jQuery","$","encode","s","config","raw","encodeURIComponent","decode","decodeURIComponent","read","converter","value","indexOf","slice","replace","pluses","json","JSON","parse","e","parseCookieValue","isFunction","cookie","key","options","arguments","length","extend","defaults","expires","days","t","Date","setMilliseconds","getMilliseconds","document","stringify","String","stringifyCookieValue","toUTCString","path","domain","secure","join","result","undefined","cookies","split","i","l","parts","name","shift","removeCookie"],"mappings":"CAOC,SAAUA,GACY,mBAAXC,QAAyBA,OAAOC,IAE1CD,QAAQ,UAAWD,GACU,iBAAZG,QAEjBC,OAAOD,QAAUH,EAAQK,QAAQ,WAGjCL,EAAQM,QATV,CAWE,SAAUC,GAIX,SAASC,EAAOC,GACf,OAAOC,EAAOC,IAAMF,EAAIG,mBAAmBH,GAG5C,SAASI,EAAOJ,GACf,OAAOC,EAAOC,IAAMF,EAAIK,mBAAmBL,GAsB5C,SAASM,EAAKN,EAAGO,GAChB,IAAIC,EAAQP,EAAOC,IAAMF,EAhB1B,SAA0BA,GACF,IAAnBA,EAAES,QAAQ,OAEbT,EAAIA,EAAEU,MAAM,GAAI,GAAGC,QAAQ,OAAQ,KAAKA,QAAQ,QAAS,OAG1D,IAKC,OADAX,EAAIK,mBAAmBL,EAAEW,QAAQC,EAAQ,MAClCX,EAAOY,KAAOC,KAAKC,MAAMf,GAAKA,EACpC,MAAMgB,KAIqBC,CAAiBjB,GAC9C,OAAOF,EAAEoB,WAAWX,GAAaA,EAAUC,GAASA,EA/BrD,IAAII,EAAS,MAkCTX,EAASH,EAAEqB,OAAS,SAAUC,EAAKZ,EAAOa,GAI7C,GAAIC,UAAUC,OAAS,IAAMzB,EAAEoB,WAAWV,GAAQ,CAGjD,GAA+B,iBAF/Ba,EAAUvB,EAAE0B,UAAWvB,EAAOwB,SAAUJ,IAErBK,QAAsB,CACxC,IAAIC,EAAON,EAAQK,QAASE,EAAIP,EAAQK,QAAU,IAAIG,KACtDD,EAAEE,gBAAgBF,EAAEG,kBAA2B,MAAPJ,GAGzC,OAAQK,SAASb,QAChBpB,EAAOqB,GAAM,IArChB,SAA8BZ,GAC7B,OAAOT,EAAOE,EAAOY,KAAOC,KAAKmB,UAAUzB,GAAS0B,OAAO1B,IAoCvC2B,CAAqB3B,GACvCa,EAAQK,QAAU,aAAeL,EAAQK,QAAQU,cAAgB,GACjEf,EAAQgB,KAAU,UAAYhB,EAAQgB,KAAO,GAC7ChB,EAAQiB,OAAU,YAAcjB,EAAQiB,OAAS,GACjDjB,EAAQkB,OAAU,WAAa,IAC9BC,KAAK,IAaR,IARA,IAAIC,EAASrB,OAAMsB,KAIlBC,EAAUX,SAASb,OAASa,SAASb,OAAOyB,MAAM,SAClDC,EAAI,EACJC,EAAIH,EAAQpB,OAENsB,EAAIC,EAAGD,IAAK,CAClB,IAAIE,EAAQJ,EAAQE,GAAGD,MAAM,KAC5BI,EAAO5C,EAAO2C,EAAME,SACpB9B,EAAS4B,EAAMP,KAAK,KAErB,GAAIpB,IAAQ4B,EAAM,CAEjBP,EAASnC,EAAKa,EAAQX,GACtB,MAIIY,QAAmCsB,KAA3BvB,EAASb,EAAKa,MAC1BsB,EAAOO,GAAQ7B,GAIjB,OAAOsB,GAGRxC,EAAOwB,YAEP3B,EAAEoD,aAAe,SAAU9B,EAAKC,GAG/B,OADAvB,EAAEqB,OAAOC,EAAK,GAAItB,EAAE0B,UAAWH,GAAWK,SAAU,MAC5C5B,EAAEqB,OAAOC","file":"../jquery.cookie.js","sourcesContent":["/*!\r\n * jQuery Cookie Plugin v1.4.1\r\n * https://github.com/carhartl/jquery-cookie\r\n *\r\n * Copyright 2006, 2014 Klaus Hartl\r\n * Released under the MIT license\r\n */\r\n(function (factory) {\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\t// AMD (Register as an anonymous module)\r\n\t\tdefine(['jquery'], factory);\r\n\t} else if (typeof exports === 'object') {\r\n\t\t// Node/CommonJS\r\n\t\tmodule.exports = factory(require('jquery'));\r\n\t} else {\r\n\t\t// Browser globals\r\n\t\tfactory(jQuery);\r\n\t}\r\n}(function ($) {\r\n\r\n\tvar pluses = /\\+/g;\r\n\r\n\tfunction encode(s) {\r\n\t\treturn config.raw ? s : encodeURIComponent(s);\r\n\t}\r\n\r\n\tfunction decode(s) {\r\n\t\treturn config.raw ? s : decodeURIComponent(s);\r\n\t}\r\n\r\n\tfunction stringifyCookieValue(value) {\r\n\t\treturn encode(config.json ? JSON.stringify(value) : String(value));\r\n\t}\r\n\r\n\tfunction parseCookieValue(s) {\r\n\t\tif (s.indexOf('\"') === 0) {\r\n\t\t\t// This is a quoted cookie as according to RFC2068, unescape...\r\n\t\t\ts = s.slice(1, -1).replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\t// Replace server-side written pluses with spaces.\r\n\t\t\t// If we can't decode the cookie, ignore it, it's unusable.\r\n\t\t\t// If we can't parse the cookie, ignore it, it's unusable.\r\n\t\t\ts = decodeURIComponent(s.replace(pluses, ' '));\r\n\t\t\treturn config.json ? JSON.parse(s) : s;\r\n\t\t} catch(e) {}\r\n\t}\r\n\r\n\tfunction read(s, converter) {\r\n\t\tvar value = config.raw ? s : parseCookieValue(s);\r\n\t\treturn $.isFunction(converter) ? converter(value) : value;\r\n\t}\r\n\r\n\tvar config = $.cookie = function (key, value, options) {\r\n\r\n\t\t// Write\r\n\r\n\t\tif (arguments.length > 1 && !$.isFunction(value)) {\r\n\t\t\toptions = $.extend({}, config.defaults, options);\r\n\r\n\t\t\tif (typeof options.expires === 'number') {\r\n\t\t\t\tvar days = options.expires, t = options.expires = new Date();\r\n\t\t\t\tt.setMilliseconds(t.getMilliseconds() + days * 864e+5);\r\n\t\t\t}\r\n\r\n\t\t\treturn (document.cookie = [\r\n\t\t\t\tencode(key), '=', stringifyCookieValue(value),\r\n\t\t\t\toptions.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE\r\n\t\t\t\toptions.path    ? '; path=' + options.path : '',\r\n\t\t\t\toptions.domain  ? '; domain=' + options.domain : '',\r\n\t\t\t\toptions.secure  ? '; secure' : ''\r\n\t\t\t].join(''));\r\n\t\t}\r\n\r\n\t\t// Read\r\n\r\n\t\tvar result = key ? undefined : {},\r\n\t\t\t// To prevent the for loop in the first place assign an empty array\r\n\t\t\t// in case there are no cookies at all. Also prevents odd result when\r\n\t\t\t// calling $.cookie().\r\n\t\t\tcookies = document.cookie ? document.cookie.split('; ') : [],\r\n\t\t\ti = 0,\r\n\t\t\tl = cookies.length;\r\n\r\n\t\tfor (; i < l; i++) {\r\n\t\t\tvar parts = cookies[i].split('='),\r\n\t\t\t\tname = decode(parts.shift()),\r\n\t\t\t\tcookie = parts.join('=');\r\n\r\n\t\t\tif (key === name) {\r\n\t\t\t\t// If second argument (value) is a function it's a converter...\r\n\t\t\t\tresult = read(cookie, value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// Prevent storing a cookie that we couldn't decode.\r\n\t\t\tif (!key && (cookie = read(cookie)) !== undefined) {\r\n\t\t\t\tresult[name] = cookie;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\tconfig.defaults = {};\r\n\r\n\t$.removeCookie = function (key, options) {\r\n\t\t// Must not alter options, thus extending a fresh object...\r\n\t\t$.cookie(key, '', $.extend({}, options, { expires: -1 }));\r\n\t\treturn !$.cookie(key);\r\n\t};\r\n\r\n}));"]}